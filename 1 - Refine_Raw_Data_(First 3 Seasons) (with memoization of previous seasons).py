import pandas as pd
import numpy as np
from datetime import datetime

# UNTESTED

rootDirectory = '/Users/dthomas/Desktop/Coding/NCAAB'
startingSeason = 2003


# read in raw game data
rawGamesDF = pd.read_csv(rootDirectory + '/MRegularSeasonDetailedResults.csv')

# identify close games
rawGamesDF['Close'] = np.logical_or(rawGamesDF.loc[:, 'NumOT'], rawGamesDF.loc[:, 'WScore'] - rawGamesDF.loc[:, 'LScore'] <= 3)

# to prevent division by zero, set a small positive minimum for field goal attempts, 3-point field goal attempts, free-throw attempts, and turnovers
rawGamesDF.loc[:, 'WFGA'] = rawGamesDF.loc[:, 'WFGA'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'LFGA'] = rawGamesDF.loc[:, 'LFGA'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'WFGA3'] = rawGamesDF.loc[:, 'WFGA3'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'LFGA3'] = rawGamesDF.loc[:, 'LFGA3'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'WFTA'] = rawGamesDF.loc[:, 'WFTA'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'LFTA'] = rawGamesDF.loc[:, 'LFTA'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'WTO'] = rawGamesDF.loc[:, 'WTO'].map(lambda x: max(x, 2 ** -64))
rawGamesDF.loc[:, 'LTO'] = rawGamesDF.loc[:, 'LTO'].map(lambda x: max(x, 2 ** -64))

# add stop-sign row at the end of rawGamesDF
rawGamesDF.loc[len(rawGamesDF), 'Season'] = 9999

# read in set of all teams
teams = pd.read_csv(rootDirectory + '/MTeams.csv')

# initialize weights for strength of schedule calculations (increase from 0 to an upper limit of 1)
GamesPlayedWeights = .00390625 * (((np.array(list(range(45)))) * (np.array(list(range(45)))) * (np.array(list(range(45)))) * (np.array(list(range(45))))) / (((.0625 * (np.array(list(range(45)))) * (np.array(list(range(45))))) + 1) * ((.0625 * (np.array(list(range(45)))) * (np.array(list(range(45))))) + 1)))  # used to weight the importance of opponents' records by the number of games they've played

# initialize dictionary to store refined data for each season
seasonTotalsDict = {}

# set starting season and day before first season and day
season = 1891  # set to arbitrary year prior to start of data
upToMinuteSeasonTotals = pd.DataFrame({})
dayNum = -1

# iterate through each game in rawGamesDF, starting from startingSeason
for index in range((rawGamesDF['Season'] == startingSeason).idxmax(), len(rawGamesDF)):

    # if this is the first game of a new season
    if rawGamesDF.iloc[index, 0] != season:

        # if at least 1 season's worth of games have been processed
        if season > 1891:
            # make end-of-season calculations
            upToMinuteSeasonTotals.loc[:, 'WinPct'] = upToMinuteSeasonTotals.loc[:, 'Wins'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FlipCloseWinPct'] = upToMinuteSeasonTotals.loc[:, 'FlipCloseWins'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'WinCloseWinPct'] = upToMinuteSeasonTotals.loc[:, 'WinCloseWins'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'LoseCloseWinPct'] = upToMinuteSeasonTotals.loc[:, 'LoseCloseWins'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'PointsPerGame'] = upToMinuteSeasonTotals.loc[:, 'Points'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'PointsAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'PointsAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'PointsMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'PointsPerGame'] - upToMinuteSeasonTotals.loc[:, 'PointsAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FGMPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGM'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGMAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGMAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGMMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGMPerGame'] - upToMinuteSeasonTotals.loc[:, 'FGMAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FGAPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGA'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGAAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGAAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGAMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGAPerGame'] - upToMinuteSeasonTotals.loc[:, 'FGAAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FGPctMargin'] = upToMinuteSeasonTotals.loc[:, 'FGPct'] - upToMinuteSeasonTotals.loc[:, 'FGPctAllowed']
            upToMinuteSeasonTotals.loc[:, 'FGM3PerGame'] = upToMinuteSeasonTotals.loc[:, 'FGM3'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGM3AllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGM3Allowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGM3MarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGM3PerGame'] - upToMinuteSeasonTotals.loc[:, 'FGM3AllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FGA3PerGame'] = upToMinuteSeasonTotals.loc[:, 'FGA3'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGA3AllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGA3Allowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FGA3MarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FGA3PerGame'] - upToMinuteSeasonTotals.loc[:, 'FGA3AllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FG3PctMargin'] = upToMinuteSeasonTotals.loc[:, 'FGPct'] - upToMinuteSeasonTotals.loc[:, 'FGPctAllowed']
            upToMinuteSeasonTotals.loc[:, 'FTMPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTM'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FTMAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTMAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FTMMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTMPerGame'] - upToMinuteSeasonTotals.loc[:, 'FTMAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FTAPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTA'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FTAAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTAAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'FTAMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'FTAPerGame'] - upToMinuteSeasonTotals.loc[:, 'FTAAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'FTPctMargin'] = upToMinuteSeasonTotals.loc[:, 'FTPct'] - upToMinuteSeasonTotals.loc[:, 'FTPctAllowed']
            upToMinuteSeasonTotals.loc[:, 'RebPerGame'] = (upToMinuteSeasonTotals.loc[:, 'OReb'] + upToMinuteSeasonTotals.loc[:, 'DReb']) / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'RebAllowedPerGame'] = (upToMinuteSeasonTotals.loc[:, 'ORebAllowed'] + upToMinuteSeasonTotals.loc[:, 'DRebAllowed']) / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'RebMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'RebPerGame'] - upToMinuteSeasonTotals.loc[:, 'RebAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'ORebPerGame'] = upToMinuteSeasonTotals.loc[:, 'OReb'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'ORebAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'ORebAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'ORebMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'ORebPerGame'] - upToMinuteSeasonTotals.loc[:, 'ORebAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'DRebPerGame'] = upToMinuteSeasonTotals.loc[:, 'DReb'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'DRebAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'DRebAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'DRebMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'DRebPerGame'] - upToMinuteSeasonTotals.loc[:, 'DRebAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'AstPerGame'] = upToMinuteSeasonTotals.loc[:, 'Ast'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'AstAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'AstAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'AstMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'AstPerGame'] - upToMinuteSeasonTotals.loc[:, 'AstAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'TOPerGame'] = upToMinuteSeasonTotals.loc[:, 'TO'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'TOAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'TOAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'TOMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'TOPerGame'] - upToMinuteSeasonTotals.loc[:, 'TOAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatioMargin'] = upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatio'] - upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatioAllowed']
            upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatio(alt)Margin'] = upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatio(alt)'] - upToMinuteSeasonTotals.loc[:, 'AvgAst/TORatio(alt)Allowed']
            upToMinuteSeasonTotals.loc[:, 'StlPerGame'] = upToMinuteSeasonTotals.loc[:, 'Stl'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'StlAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'StlAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'StlMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'StlPerGame'] - upToMinuteSeasonTotals.loc[:, 'StlAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'BlkPerGame'] = upToMinuteSeasonTotals.loc[:, 'Blk'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'BlkAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'BlkAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'BlkMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'BlkPerGame'] - upToMinuteSeasonTotals.loc[:, 'BlkAllowedPerGame']
            upToMinuteSeasonTotals.loc[:, 'PFPerGame'] = upToMinuteSeasonTotals.loc[:, 'PF'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'PFAllowedPerGame'] = upToMinuteSeasonTotals.loc[:, 'PFAllowed'] / upToMinuteSeasonTotals.loc[:, 'GamesPlayed']
            upToMinuteSeasonTotals.loc[:, 'PFMarginPerGame'] = upToMinuteSeasonTotals.loc[:, 'PFPerGame'] - upToMinuteSeasonTotals.loc[:, 'PFAllowedPerGame']
            # strength of schedule
            for teamID in upToMinuteSeasonTotals.index:
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppWinPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'WinPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFlipCloseWinPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FlipCloseWinPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppWinCloseWinPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'WinCloseWinPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppLoseCloseWinPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'LoseCloseWinPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPointsPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PointsPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPointsAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PointsAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPointsMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PointsMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGMPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGMPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGMAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGMAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGMMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGMMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGAPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGAPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGAAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGAAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGAMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGAMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGPctAllowedNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGPctAllowed'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGPctMarginNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGPctMargin'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGM3PerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGM3PerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGM3AllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGM3AllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGM3MarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGM3MarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGA3PerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGA3PerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGA3AllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGA3AllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFGA3MarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FGA3MarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFG3PctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FG3Pct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFG3PctAllowedNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FG3PctAllowed'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFG3PctMarginNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FG3PctMargin'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTMPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTMPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTMAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTMAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTMMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTMMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTAPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTAPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTAAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTAAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTAMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTAMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTPctNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTPct'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTPctAllowedNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTPctAllowed'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppFTPctMarginNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'FTPctMargin'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppRebPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'RebPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppRebAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'RebAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppRebMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'RebMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppORebPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'ORebPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppORebAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'ORebAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppORebMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'ORebMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppDRebPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'DRebPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppDRebAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'DRebAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppDRebMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'DRebMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAstPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AstPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAstAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AstAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAstMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AstMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppTOPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'TOPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppTOAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'TOAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppTOMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'TOMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatioNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatio'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatioAllowedNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatioAllowed'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatioMarginNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatioMargin'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatio(alt)Now'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatio(alt)'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatio(alt)AllowedNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatio(alt)Allowed'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppAvgAst/TORatio(alt)MarginNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'AvgAst/TORatio(alt)Margin'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppStlPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'StlPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppStlAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'StlAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppStlMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'StlMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppBlkPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'BlkPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppBlkAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'BlkAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppBlkMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'BlkMarginPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPFPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PFPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPFAllowedPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PFAllowedPerGame'].mean()
                upToMinuteSeasonTotals.loc[teamID, 'SoSAvgOppPFMarginPerGameNow'] = upToMinuteSeasonTotals.loc[upToMinuteSeasonTotals.loc[teamID, 'ListOpponentsTeamID'], 'PFMarginPerGame'].mean()

            # memoize end-of-season totals
            seasonTotalsDict[season] = upToMinuteSeasonTotals.copy()
            # write previous season totals
            seasonTotalsDict[int(season)].to_csv(rootDirectory + '/testing9-29-2023/' + '/SeasonTotals' + '/SeasonTotals' + str(int(season)) + '.csv')
            print(rootDirectory + 'testing9-21-2023' + '/SeasonTotals' + '/SeasonTotals' + str(int(season)) + '.csv written')
        # advance to next season
        season = rawGamesDF.iloc[index, 0]
        if season == startingSeason + 3:
            break
        print('Season:', int(season), '   Current time:', str(datetime.now())[:-7])
        # reset day number
        dayNum = -1
        # reset season totals
        upToMinuteSeasonTotals = pd.DataFrame(columns=['Team ID',  # 4-digit numerical team identification number
                                                       # season totals
                                                       'GamesPlayed',  # total games played during the current season
                                                       'Wins',  # total wins during the current season
                                                       'CloseGames',  # total close games played during the current season
                                                       'FlipCloseWins',  # total wins during the current season (had the results of all of their close games been flipped)
                                                       'WinCloseWins',  # total wins during the current season (had they won all of their close games)
                                                       'LoseCloseWins',  # total wins during the current season (had they lost all of their close games)
                                                       'Points',  # total points scored during the current season
                                                       'PointsAllowed',  # total points allowed during the current season
                                                       'FGM',  # total field goals made during the current season
                                                       'FGMAllowed',  # total field goals allowed during the current season
                                                       'FGA',  # total field goal attempts during the current season
                                                       'FGAAllowed',  # total field goal attempts allowed during the current season
                                                       'FGPct',  # total field goals made divided by total field goal attempts during the current season
                                                       'FGPctAllowed',  # total field goals allowed divided by total field goal attempts allowed during the current season
                                                       'FGM3',  # total 3-point field goals made during the current season
                                                       'FGM3Allowed',  # total 3-point field goals allowed during the current season
                                                       'FGA3',  # total 3 point field goal attempts during the current season
                                                       'FGA3Allowed',  # total 3-point field goal attempts allowed during the current season
                                                       'FG3Pct',  # total 3-point field goals made divided by total 3-point field goal attempts during the current season
                                                       'FG3PctAllowed',  # total 3-point field goals allowed divided by total 3-point field goal attempts allowed during the current season
                                                       'FTM',  # total free-throws made during the current season
                                                       'FTMAllowed',  # total successful free-throws allowed during the current season
                                                       'FTA',  # total free-throw attempts during the current season
                                                       'FTAAllowed',  # total free-throw attempts allowed during the current season
                                                       'FTPct',  # total free-throws made divided by total free-throw attempts during the current season
                                                       'FTPctAllowed',  # total successful free-throws allowed divided by total free-throw attempts allowed during the current season
                                                       'OReb',  # total offensive rebounds during the current season
                                                       'ORebAllowed',  # total offensive rebounds allowed during the current season
                                                       'DReb',  # total defensive rebounds during the current season
                                                       'DRebAllowed',  # total defensive rebounds allowed during the current season
                                                       'Ast',  # total assists during the current season
                                                       'AstAllowed',  # total assists allowed during the current season
                                                       'TO',  # total turnovers during the current season
                                                       'TOAllowed',  # total turnovers forced during the current season
                                                       'AvgAst/TORatio',  # total assists divided by total turnovers during the current season
                                                       'AvgAst/TORatioAllowed',  # total assists allowed divided by total turnovers forced during the current season
                                                       'AvgAst/TORatio(alt)',  # average of assist/turnover ratios during the current season (calculated by averaging each game's assist/turnover ratio, not by dividing total assists / total turnovers)
                                                       'AvgAst/TORatio(alt)Allowed',  # average of opposing assist/turnover ratios during the current season (calculated by averaging each game's assist/turnover ratio, not by dividing total assists / total turnovers)
                                                       'Stl',  # total steals during the current season
                                                       'StlAllowed',  # total steals allowed during the current season
                                                       'Blk',  # total blocks during the current season
                                                       'BlkAllowed',  # total blocks allowed during the current season
                                                       'PF',  # total fouls committed during the current season
                                                       'PFAllowed',  # total fouls absorbed during the current season
                                                       # strength of schedule
                                                       'ListOpponentsTeamID',  # list of opponents' 4-digit team identification numbers
                                                       'SoSSumOppGamesPlayedWeightsDenominator',  # sum of weights applied to opponents' stats based on number of games they'd played prior to their contest against this team
                                                       'SoSWeightedAvgOpponentsWinPct',  # weighted average of opponents' win percentages entering contest against this team
                                                       'SoSWeightedAvgOpponentsFlipCloseWinPct',  # weighted average of opponents' win percentages (had the results of all of their close games been flipped) entering contest against this team
                                                       'SoSWeightedAvgOpponentsWinCloseWinPct',  # weighted average of opponents' win percentages (had they won all of their close games) entering contest against this team
                                                       'SoSWeightedAvgOpponentsLoseCloseWinPct',  # weighted average of opponents' win percentages (had they lost all of their close games) entering contest against this team
                                                       'SoSWeightedAvgOpponentsPointsPerGame',  # weighted average of opponents' average points per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsPointsAllowedPerGame',  # weighted average of opponents' average points per game allowed entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGMPerGame',  # weighted average of opponents' average field goals made per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGMAllowedPerGame',  # weighted average of opponents' average field goals allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGAPerGame',  # weighted average of opponents' average field goal attempts per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGAAllowedPerGame',  # weighted average of opponents' average field goal attempts allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGPct',  # weighted average of opponents' season-long field goal percentage entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGPctAllowed',  # weighted average of opponents' season-long field goal percentage allowed entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGM3PerGame',  # weighted average of opponents' average 3-point field goals made per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGM3AllowedPerGame',  # weighted average of opponents' average 3-point field goals allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGA3PerGame',  # weighted average of opponents' average 3-point field goal attempts per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFGA3AllowedPerGame',  # weighted average of opponents' average 3-point field goal attempts allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFG3Pct',  # weighted average of opponents' season-long 3-point field goal percentage entering contest against this team
                                                       'SoSWeightedAvgOpponentsFG3PctAllowed',  # weighted average of opponents' season-long 3-point field goal percentage allowed entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTMPerGame',  # weighted average of opponents' average free throws made per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTMAllowedPerGame',  # weighted average of opponents' average successful free throws allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTAPerGame',  # weighted average of opponents' average free throw attempts per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTAAllowedPerGame',  # weighted average of opponents' average free throw attempts allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTPct',  # weighted average of opponents' season-long free-throw percentage entering contest against this team
                                                       'SoSWeightedAvgOpponentsFTPctAllowed',  # weighted average of opponents' season-long free-throw percentage allowed entering contest against this team
                                                       'SoSWeightedAvgOpponentsORebPerGame',  # weighted average of opponents' average offensive rebounds per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsORebAllowedPerGame',  # weighted average of opponents' average offensive rebounds allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsDRebPerGame',  # weighted average of opponents' average defensive rebounds per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsDRebAllowedPerGame',  # weighted average of opponents' average defensive rebounds allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsAstPerGame',  # weighted average of opponents' average assists per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsAstAllowedPerGame',  # weighted average of opponents' average assists allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsTOPerGame',  # weighted average of opponents' average turnovers per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsTOAllowedPerGame',  # weighted average of opponents' average turnovers forced per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsAst/TORatio',  # weighted average of opponents' season-long assist/turnover ratios (total assists / total turnovers) entering contest against this team
                                                       'SoSWeightedAvgOpponentsAst/TORatioAllowed',  # weighted average of opponents' season-long assist/turnover ratios allowed (total assists allowed / total turnovers forced) entering contest against this team (calculated by averaging each team's total assists allowed divided by that team's total turnovers forced)
                                                       'SoSWeightedAvgOpponentsAst/TORatio(alt)',  # weighted average of opponents' average of assist/turnover ratios entering contest against this team (calculated by averaging the assist/turnover ratios from each game, not by dividing total assists / total turnovers)
                                                       'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed',  # weighted average of opponents' average of assist/turnover ratios allowed entering contest against this team (calculated by averaging the assist/turnover ratios from each game, not by dividing total assists / total turnovers)
                                                       'SoSWeightedAvgOpponentsStlPerGame',  # weighted average of opponents' average steals per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsStlAllowedPerGame',  # weighted average of opponents' average steals allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsBlkPerGame',  # weighted average of opponents' average blocks per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsBlkAllowedPerGame',  # weighted average of opponents' average blocks allowed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsPFPerGame',  # weighted average of opponents' average fouls committed per game entering contest against this team
                                                       'SoSWeightedAvgOpponentsPFAllowedPerGame'])  # weighted average of opponents' average fouls absorbed per game entering contest against this team
        upToMinuteSeasonTotals.set_index('Team ID', inplace=True)
        for team in teams.iloc[:, 0]:
            upToMinuteSeasonTotals.loc[team] = {'GamesPlayed': 0, 'Wins': 0, 'CloseGames': 0, 'FlipCloseWins': 0, 'WinCloseWins': 0, 'LoseCloseWins': 0, 'Points': 0, 'PointsAllowed': 0, 'FGM': 0, 'FGMAllowed': 0,
                                                'FGA': 0, 'FGAAllowed': 0, 'FGPct': 0, 'FGPctAllowed': 0, 'FGM3': 0, 'FGM3Allowed': 0, 'FGA3': 0, 'FGA3Allowed': 0, 'FG3Pct': 0, 'FG3PctAllowed': 0, 'FTM': 0, 'FTMAllowed': 0, 'FTA': 0, 'FTAAllowed': 0, 'FTPct': 0, 'FTPctAllowed': 0, 'OReb': 0, 'ORebAllowed': 0,
                                                'DReb': 0, 'DRebAllowed': 0, 'Ast': 0, 'AstAllowed': 0, 'TO': 0, 'TOAllowed': 0, 'AvgAst/TORatio': 0, 'AvgAst/TORatioAllowed': 0, 'AvgAst/TORatio(alt)': 0, 'AvgAst/TORatio(alt)Allowed': 0,
                                                'Stl': 0, 'StlAllowed': 0, 'Blk': 0, 'BlkAllowed': 0, 'PF': 0, 'PFAllowed': 0, 'ListOpponentsTeamID': [], 'SoSSumOppGamesPlayedWeightsDenominator': 0, 'SoSWeightedAvgOpponentsWinPct': 0,
                                                'SoSWeightedAvgOpponentsFlipCloseWinPct': 0, 'SoSWeightedAvgOpponentsWinCloseWinPct': 0, 'SoSWeightedAvgOpponentsLoseCloseWinPct': 0, 'SoSWeightedAvgOpponentsPointsPerGame': 0,
                                                'SoSWeightedAvgOpponentsPointsAllowedPerGame': 0, 'SoSWeightedAvgOpponentsFGMPerGame': 0, 'SoSWeightedAvgOpponentsFGMAllowedPerGame': 0, 'SoSWeightedAvgOpponentsFGAPerGame': 0,
                                                'SoSWeightedAvgOpponentsFGAAllowedPerGame': 0, 'SoSWeightedAvgOpponentsFGPct': 0, 'SoSWeightedAvgOpponentsFGPctAllowed': 0, 'SoSWeightedAvgOpponentsFGM3PerGame': 0, 'SoSWeightedAvgOpponentsFGM3AllowedPerGame': 0, 'SoSWeightedAvgOpponentsFGA3PerGame': 0,
                                                'SoSWeightedAvgOpponentsFGA3AllowedPerGame': 0, 'SoSWeightedAvgOpponentsFG3Pct': 0, 'SoSWeightedAvgOpponentsFG3PctAllowed': 0, 'SoSWeightedAvgOpponentsFTMPerGame': 0, 'SoSWeightedAvgOpponentsFTMAllowedPerGame': 0, 'SoSWeightedAvgOpponentsFTAPerGame': 0,
                                                'SoSWeightedAvgOpponentsFTAAllowedPerGame': 0, 'SoSWeightedAvgOpponentsFTPct': 0, 'SoSWeightedAvgOpponentsFTPctAllowed': 0, 'SoSWeightedAvgOpponentsORebPerGame': 0, 'SoSWeightedAvgOpponentsORebAllowedPerGame': 0, 'SoSWeightedAvgOpponentsDRebPerGame': 0,
                                                'SoSWeightedAvgOpponentsDRebAllowedPerGame': 0, 'SoSWeightedAvgOpponentsAstPerGame': 0, 'SoSWeightedAvgOpponentsAstAllowedPerGame': 0, 'SoSWeightedAvgOpponentsTOPerGame': 0,
                                                'SoSWeightedAvgOpponentsTOAllowedPerGame': 0, 'SoSWeightedAvgOpponentsAst/TORatio': 0, 'SoSWeightedAvgOpponentsAst/TORatioAllowed': 0, 'SoSWeightedAvgOpponentsAst/TORatio(alt)': 0, 'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed': 0,
                                                'SoSWeightedAvgOpponentsStlPerGame': 0, 'SoSWeightedAvgOpponentsStlAllowedPerGame': 0, 'SoSWeightedAvgOpponentsBlkPerGame': 0, 'SoSWeightedAvgOpponentsBlkAllowedPerGame': 0,
                                                'SoSWeightedAvgOpponentsPFPerGame': 0, 'SoSWeightedAvgOpponentsPFAllowedPerGame': 0}

    # if this is the first game of a new day
    if rawGamesDF.iloc[index, 1] > dayNum:
        dayNum = rawGamesDF.iloc[index, 1]
        print('Season:', int(season), '   Day Number:', int(dayNum), '   Current Time:', str(datetime.now())[:-7])
        # update season totals
        startOfDaySeasonTotals = upToMinuteSeasonTotals.copy()

    # update winning team's up-to-the-minute season totals with results of game
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] += 1
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Wins'] += 1
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'CloseGames'] += rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FlipCloseWins'] += 1 - rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'WinCloseWins'] += 1
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'LoseCloseWins'] += 1 - rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Points'] += rawGamesDF.loc[index, 'WScore']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PointsAllowed'] += rawGamesDF.loc[index, 'LScore']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM'] += rawGamesDF.loc[index, 'WFGM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGMAllowed'] += rawGamesDF.loc[index, 'LFGM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA'] += rawGamesDF.loc[index, 'WFGA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGAAllowed'] += rawGamesDF.loc[index, 'LFGA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM'] + rawGamesDF.loc[index, 'WFGM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA'] + rawGamesDF.loc[index, 'WFGA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGMAllowed'] + rawGamesDF.loc[index, 'LFGM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGAAllowed'] + rawGamesDF.loc[index, 'LFGA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3'] += rawGamesDF.loc[index, 'WFGM3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3Allowed'] += rawGamesDF.loc[index, 'LFGM3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3'] += rawGamesDF.loc[index, 'WFGA3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3Allowed'] += rawGamesDF.loc[index, 'LFGA3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FG3Pct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3'] + rawGamesDF.loc[index, 'WFGM3']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3'] + rawGamesDF.loc[index, 'WFGA3'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FG3PctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3Allowed'] + rawGamesDF.loc[index, 'LFGM3']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3Allowed'] + rawGamesDF.loc[index, 'LFGA3'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTM'] += rawGamesDF.loc[index, 'WFTM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTMAllowed'] += rawGamesDF.loc[index, 'LFTM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTA'] += rawGamesDF.loc[index, 'WFTA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTAAllowed'] += rawGamesDF.loc[index, 'LFTA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTM'] + rawGamesDF.loc[index, 'WFTM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTA'] + rawGamesDF.loc[index, 'WFTA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTMAllowed'] + rawGamesDF.loc[index, 'LFTM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTAAllowed'] + rawGamesDF.loc[index, 'LFTA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'OReb'] += rawGamesDF.loc[index, 'WOR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'ORebAllowed'] += rawGamesDF.loc[index, 'LOR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'DReb'] += rawGamesDF.loc[index, 'WDR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'DRebAllowed'] += rawGamesDF.loc[index, 'LDR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Ast'] += rawGamesDF.loc[index, 'WAst']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AstAllowed'] += rawGamesDF.loc[index, 'LAst']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TO'] += rawGamesDF.loc[index, 'WTO']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TOAllowed'] += rawGamesDF.loc[index, 'LTO']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Ast'] + rawGamesDF.loc[index, 'WAst']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TO'] + rawGamesDF.loc[index, 'WTO'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatioAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AstAllowed'] + rawGamesDF.loc[index, 'LAst']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TOAllowed'] + rawGamesDF.loc[index, 'LTO'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] + rawGamesDF.loc[index, 'WAst'] / rawGamesDF.loc[index, 'WTO']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] + 1)
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)Allowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)Allowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] + rawGamesDF.loc[index, 'LAst'] / rawGamesDF.loc[index, 'LTO']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] + 1)
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Stl'] += rawGamesDF.loc[index, 'WStl']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'StlAllowed'] += rawGamesDF.loc[index, 'LStl']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Blk'] += rawGamesDF.loc[index, 'WBlk']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'BlkAllowed'] += rawGamesDF.loc[index, 'LBlk']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PF'] += rawGamesDF.loc[index, 'WPF']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PFAllowed'] += rawGamesDF.loc[index, 'LPF']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'ListOpponentsTeamID'].append(rawGamesDF.loc[index, 'LTeamID'])
    if startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']:
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] += GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Wins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFlipCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFlipCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FlipCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsWinCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsWinCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'WinCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsLoseCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsLoseCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'LoseCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPointsPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPointsPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Points'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPointsAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPointsAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PointsAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGMPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGMPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGMAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGMAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGAPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGAPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGAAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGAAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGAAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGPctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGAAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGM3PerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGM3PerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGM3AllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGM3AllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGA3PerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGA3PerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGA3AllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFGA3AllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFG3Pct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFG3Pct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFG3PctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFG3PctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3Allowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTMPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTMPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTMAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTMAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTAPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTAPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTA'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTAAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTAAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTAAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTA'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsFTPctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTAAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsORebPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsORebPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'OReb'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsORebAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsORebAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'ORebAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsDRebPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsDRebPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'DReb'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsDRebAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsDRebAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'DRebAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAstPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAstPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Ast'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAstAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAstAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AstAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsTOPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsTOPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TO'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsTOAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsTOAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TOAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Ast'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TO'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatioAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatioAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AstAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TOAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)Allowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsStlPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsStlPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Stl'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsStlAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsStlAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'StlAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsBlkPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsBlkPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Blk'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsBlkAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsBlkAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'BlkAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPFPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPFPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PF'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPFAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSWeightedAvgOpponentsPFAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PFAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed']])
    # update losing team's up-to-the-minute season totals with results of game
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] += 1
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'CloseGames'] += rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FlipCloseWins'] += rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'WinCloseWins'] += rawGamesDF.loc[index, 'Close']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Points'] += rawGamesDF.loc[index, 'LScore']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PointsAllowed'] += rawGamesDF.loc[index, 'WScore']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM'] += rawGamesDF.loc[index, 'LFGM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGMAllowed'] += rawGamesDF.loc[index, 'WFGM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA'] += rawGamesDF.loc[index, 'LFGA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGAAllowed'] += rawGamesDF.loc[index, 'WFGA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM'] + rawGamesDF.loc[index, 'LFGM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA'] + rawGamesDF.loc[index, 'LFGA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGMAllowed'] + rawGamesDF.loc[index, 'WFGM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGAAllowed'] + rawGamesDF.loc[index, 'WFGA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3'] += rawGamesDF.loc[index, 'LFGM3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3Allowed'] += rawGamesDF.loc[index, 'WFGM3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3'] += rawGamesDF.loc[index, 'LFGA3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3Allowed'] += rawGamesDF.loc[index, 'WFGA3']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FG3Pct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3'] + rawGamesDF.loc[index, 'LFGM3']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3'] + rawGamesDF.loc[index, 'LFGA3'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FG3PctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGM3Allowed'] + rawGamesDF.loc[index, 'WFGM3']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FGA3Allowed'] + rawGamesDF.loc[index, 'WFGA3'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTM'] += rawGamesDF.loc[index, 'LFTM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTMAllowed'] += rawGamesDF.loc[index, 'WFTM']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTA'] += rawGamesDF.loc[index, 'LFTA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTAAllowed'] += rawGamesDF.loc[index, 'WFTA']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTM'] + rawGamesDF.loc[index, 'LFTM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTA'] + rawGamesDF.loc[index, 'LFTA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTMAllowed'] + rawGamesDF.loc[index, 'WFTM']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'FTAAllowed'] + rawGamesDF.loc[index, 'WFTA'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'OReb'] += rawGamesDF.loc[index, 'LOR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'ORebAllowed'] += rawGamesDF.loc[index, 'WOR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'DReb'] += rawGamesDF.loc[index, 'LDR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'DRebAllowed'] += rawGamesDF.loc[index, 'WDR']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Ast'] += rawGamesDF.loc[index, 'LAst']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AstAllowed'] += rawGamesDF.loc[index, 'WAst']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TO'] += rawGamesDF.loc[index, 'LTO']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TOAllowed'] += rawGamesDF.loc[index, 'WTO']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Ast'] + rawGamesDF.loc[index, 'LAst']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TO'] + rawGamesDF.loc[index, 'LTO'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatioAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AstAllowed'] + rawGamesDF.loc[index, 'WAst']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'TOAllowed'] + rawGamesDF.loc[index, 'WTO'])
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] + rawGamesDF.loc[index, 'LAst'] / rawGamesDF.loc[index, 'LTO']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] + 1)
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)Allowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'AvgAst/TORatio(alt)Allowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] + rawGamesDF.loc[index, 'WAst'] / rawGamesDF.loc[index, 'WTO']) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'GamesPlayed'] + 1)
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Stl'] += rawGamesDF.loc[index, 'LStl']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'StlAllowed'] += rawGamesDF.loc[index, 'WStl']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'Blk'] += rawGamesDF.loc[index, 'LBlk']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'BlkAllowed'] += rawGamesDF.loc[index, 'WBlk']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PF'] += rawGamesDF.loc[index, 'LPF']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'PFAllowed'] += rawGamesDF.loc[index, 'WPF']
    upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'ListOpponentsTeamID'].append(rawGamesDF.loc[index, 'WTeamID'])
    if startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']:
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] += GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Wins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFlipCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFlipCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FlipCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsWinCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsWinCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'WinCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsLoseCloseWinPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsLoseCloseWinPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'LoseCloseWins'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPointsPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPointsPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Points'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPointsAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPointsAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PointsAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGMPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGMPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGMAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGMAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGAPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGAPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGAAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGAAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGAAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGPctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGAAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGM3PerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGM3PerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGM3AllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGM3AllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGA3PerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGA3PerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGA3AllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFGA3AllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFG3Pct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFG3Pct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFG3PctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFG3PctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGM3Allowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FGA3Allowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTMPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTMPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTMAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTMAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTAPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTAPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTA'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTAAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTAAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTAAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTPct'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTPct'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTM'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTA'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTPctAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsFTPctAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTMAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'FTAAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsORebPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsORebPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'OReb'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsORebAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsORebAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'ORebAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsDRebPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsDRebPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'DReb'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsDRebAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsDRebAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'DRebAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAstPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAstPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Ast'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAstAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAstAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AstAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsTOPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsTOPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TO'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsTOAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsTOAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TOAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Ast'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TO'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatioAllowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatioAllowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AstAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'TOAllowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsAst/TORatio(alt)Allowed'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'AvgAst/TORatio(alt)Allowed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsStlPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsStlPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Stl'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsStlAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsStlAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'StlAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsBlkPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsBlkPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'Blk'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsBlkAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsBlkAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'BlkAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPFPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPFPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PF'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
        upToMinuteSeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPFAllowedPerGame'] = (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSWeightedAvgOpponentsPFAllowedPerGame'] * startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'PFAllowed'] / startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed'] * GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']]) / (startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'LTeamID']), 'SoSSumOppGamesPlayedWeightsDenominator'] + GamesPlayedWeights[startOfDaySeasonTotals.loc[int(rawGamesDF.loc[index, 'WTeamID']), 'GamesPlayed']])
